{
  "name": "Procesamiento de Llamadas",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "call",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "name": "Webhook Llamada",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extraemos datos de la llamada del webhook\nconst callData = $input.item.json;\n\nconst callId = callData.callId;\nconst clientId = callData.clientId;\nconst recordingUrl = callData.recordingUrl;\nconst callerNumber = callData.callerNumber;\nconst companyInfo = callData.companyInfo;\nconst botConfig = callData.botConfig;\nconst notificationConfig = callData.notificationConfig;\n\n// Creamos un objeto con los datos procesados\nreturn {\n  json: {\n    callId,\n    clientId,\n    recordingUrl,\n    callerNumber,\n    companyInfo,\n    botConfig,\n    notificationConfig,\n    processStartTime: new Date().toISOString()\n  }\n};"
      },
      "name": "Extraer Datos",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/audio/transcriptions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "formData": {
            "file": "={{ $binary.audioData }}",
            "model": "whisper-1",
            "language": "es"
          }
        }
      },
      "name": "Whisper Transcripción",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        850,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{ $node[\"Extraer Datos\"].json.recordingUrl }}",
        "options": {
          "binary": true,
          "outputPropertyName": "audioData"
        }
      },
      "name": "Descargar Audio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "content": "=## Transcripción de llamada\n\n{{ $node[\"Whisper Transcripción\"].json.text }}",
        "additionalFields": {}
      },
      "name": "Formatear Transcripción",
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        1050,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "requestMethod": "POST",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n  \"model\": \"gpt-4\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Eres un asistente encargado de analizar transcripciones de llamadas telefónicas para la empresa \" + $node[\"Extraer Datos\"].json.companyInfo.companyName + \". Tu tarea es extraer la siguiente información en formato JSON:\\n1. Nombre del llamante (si se menciona)\\n2. Número de teléfono de contacto (si se menciona)\\n3. Motivo principal de la llamada\\n4. Nivel de urgencia (bajo, medio, alto)\\n5. Clasificación del tipo de llamada (consulta, queja, solicitud de información, etc.)\\n6. Resumen breve y conciso de la llamada (máximo 2 frases)\\n\\nInformación sobre la empresa: \" + ($node[\"Extraer Datos\"].json.companyInfo.description || '')\n    },\n    {\n      \"role\": \"user\",\n      \"content\": $node[\"Whisper Transcripción\"].json.text\n    }\n  ],\n  \"temperature\": 0.3,\n  \"max_tokens\": 500\n}"
      },
      "name": "Analizar con GPT",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1250,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extraer el contenido JSON del resultado de GPT\nconst gptResponse = $input.item.json.choices[0].message.content;\n\n// Intentar extraer JSON si está entre comillas\nlet jsonMatch = gptResponse.match(/```json([\\s\\S]*?)```/) || gptResponse.match(/```([\\s\\S]*?)```/);\nlet jsonString = jsonMatch ? jsonMatch[1].trim() : gptResponse;\n\n// Si falla, intentamos usar toda la respuesta\nlet analysisData;\ntry {\n  analysisData = JSON.parse(jsonString);\n} catch (e) {\n  // Si falla el parsing, intentamos recuperar cualquier objeto JSON en la respuesta\n  const possibleJson = gptResponse.match(/{[\\s\\S]*}/);\n  if (possibleJson) {\n    try {\n      analysisData = JSON.parse(possibleJson[0]);\n    } catch (e2) {\n      // Si todo falla, creamos un objeto básico\n      analysisData = {\n        name: \"No identificado\",\n        phoneNumber: \"No proporcionado\",\n        callPurpose: \"No determinado\",\n        urgencyLevel: \"medio\",\n        classification: \"No clasificado\",\n        summary: \"No fue posible analizar la transcripción\"\n      };\n    }\n  }\n}\n\n// Combinamos los datos originales con el análisis\nconst result = {\n  ...analysisData,\n  callId: $input.item.json[\"Extraer Datos\"].callId,\n  clientId: $input.item.json[\"Extraer Datos\"].clientId,\n  transcription: $input.item.json[\"Whisper Transcripción\"].text,\n  recordingUrl: $input.item.json[\"Extraer Datos\"].recordingUrl,\n  callerNumber: $input.item.json[\"Extraer Datos\"].callerNumber,\n  rawAnalysis: gptResponse\n};\n\nreturn { json: result };"
      },
      "name": "Procesar Análisis",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1450,
        300
      ]
    },
    {
      "parameters": {
        "url": "=https://{{$env.API_BASE_URL}}/webhooks/ai-results",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "requestMethod": "POST",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n  \"type\": \"call\",\n  \"id\": $node[\"Procesar Análisis\"].json.callId,\n  \"aiSummary\": $node[\"Procesar Análisis\"].json.summary,\n  \"aiClassification\": $node[\"Procesar Análisis\"].json.classification,\n  \"contactInfo\": {\n    \"name\": $node[\"Procesar Análisis\"].json.name,\n    \"phone\": $node[\"Procesar Análisis\"].json.phoneNumber\n  },\n  \"urgencyLevel\": $node[\"Procesar Análisis\"].json.urgencyLevel,\n  \"callPurpose\": $node[\"Procesar Análisis\"].json.callPurpose,\n  \"notifiedTo\": $node[\"Preparar Notificaciones\"].json.recipients\n}"
      },
      "name": "Actualizar API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2050,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Determinar destinatarios de notificaciones según nivel de urgencia\nconst notificationConfig = $input.item.json[\"Extraer Datos\"].notificationConfig;\nconst urgencyLevel = $input.item.json[\"Procesar Análisis\"].urgencyLevel.toLowerCase();\nconst classification = $input.item.json[\"Procesar Análisis\"].classification;\n\n// Array para almacenar los destinatarios\nlet recipients = [];\n\n// Verificar si hay destinatarios por defecto\nif (notificationConfig.defaultRecipients && Array.isArray(notificationConfig.defaultRecipients)) {\n  recipients = [...notificationConfig.defaultRecipients];\n}\n\n// Verificar si hay reglas por urgencia\nif (notificationConfig.urgencyRules && notificationConfig.urgencyRules[urgencyLevel]) {\n  const urgencyRecipients = notificationConfig.urgencyRules[urgencyLevel];\n  if (Array.isArray(urgencyRecipients)) {\n    // Añadir sin duplicar\n    urgencyRecipients.forEach(email => {\n      if (!recipients.includes(email)) {\n        recipients.push(email);\n      }\n    });\n  }\n}\n\n// Verificar si hay reglas por clasificación\nif (notificationConfig.classificationRules && classification) {\n  for (const rule of notificationConfig.classificationRules) {\n    if (rule.keywords && rule.recipients && Array.isArray(rule.recipients)) {\n      // Verificar si alguna keyword coincide con la clasificación\n      const keywordMatch = rule.keywords.some(keyword => \n        classification.toLowerCase().includes(keyword.toLowerCase())\n      );\n      \n      if (keywordMatch) {\n        // Añadir sin duplicar\n        rule.recipients.forEach(email => {\n          if (!recipients.includes(email)) {\n            recipients.push(email);\n          }\n        });\n      }\n    }\n  }\n}\n\n// Preparar datos para envío de emails\nconst emailData = {\n  callerName: $input.item.json[\"Procesar Análisis\"].name,\n  callerNumber: $input.item.json[\"Extraer Datos\"].callerNumber,\n  callPurpose: $input.item.json[\"Procesar Análisis\"].callPurpose,\n  urgencyLevel: $input.item.json[\"Procesar Análisis\"].urgencyLevel,\n  aiSummary: $input.item.json[\"Procesar Análisis\"].summary,\n  recordingUrl: $input.item.json[\"Extraer Datos\"].recordingUrl,\n  transcription: $input.item.json[\"Procesar Análisis\"].transcription\n};\n\nreturn {\n  json: {\n    recipients,\n    emailData\n  }\n};"
      },
      "name": "Preparar Notificaciones",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1650,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "smtpOAuth2",
        "fromEmail": "={{$env.SMTP_USER}}",
        "toEmail": "={{$node[\"Preparar Notificaciones\"].json.recipients.join(',')}}",
        "subject": "=Nueva llamada [{{$node[\"Procesar Análisis\"].json.urgencyLevel.toUpperCase()}}] - {{$node[\"Procesar Análisis\"].json.name || $node[\"Extraer Datos\"].json.callerNumber || 'Llamante desconocido'}}",
        "text": "=Nueva llamada recibida\nUrgencia: {{$node[\"Procesar Análisis\"].json.urgencyLevel || 'No determinada'}}\nDe: {{$node[\"Procesar Análisis\"].json.name || 'No identificado'}}\nNúmero: {{$node[\"Extraer Datos\"].json.callerNumber || 'No disponible'}}\nMotivo: {{$node[\"Procesar Análisis\"].json.callPurpose || 'No especificado'}}\nResumen: {{$node[\"Procesar Análisis\"].json.summary || 'No disponible'}}\nGrabación: {{$node[\"Extraer Datos\"].json.recordingUrl}}",
        "html": "=<div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n  <h2 style=\"color: #333;\">Nueva llamada recibida</h2>\n  <div style=\"background-color: {{$node[\"Procesar Análisis\"].json.urgencyLevel === 'alto' ? '#FF4136' : ($node[\"Procesar Análisis\"].json.urgencyLevel === 'medio' ? '#FF851B' : '#2ECC40')}}; color: white; padding: 10px; text-align: center; margin-bottom: 15px;\">\n    <strong>Urgencia: {{$node[\"Procesar Análisis\"].json.urgencyLevel || 'No determinada'}}</strong>\n  </div>\n  <div style=\"border: 1px solid #ddd; padding: 15px; border-radius: 4px;\">\n    <p><strong>De:</strong> {{$node[\"Procesar Análisis\"].json.name || 'No identificado'}}</p>\n    <p><strong>Número:</strong> {{$node[\"Extraer Datos\"].json.callerNumber || 'No disponible'}}</p>\n    <p><strong>Motivo:</strong> {{$node[\"Procesar Análisis\"].json.callPurpose || 'No especificado'}}</p>\n    <p><strong>Resumen:</strong> {{$node[\"Procesar Análisis\"].json.summary || 'No disponible'}}</p>\n    <p><strong>Grabación:</strong> <a href=\"{{$node[\"Extraer Datos\"].json.recordingUrl}}\" target=\"_blank\">Escuchar grabación</a></p>\n  </div>\n  <p style=\"font-size: 12px; color: #666; margin-top: 20px;\">\n    Este es un mensaje automático. No responda a este email.\n  </p>\n</div>",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "Enviar Notificaciones",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        1850,
        300
      ]
    },
    {
      "parameters": {
        "respondWithJson": true,
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"Llamada procesada correctamente\",\n  \"callId\": {{$node[\"Extraer Datos\"].json.callId}},\n  \"timestamp\": \"{{$now}}\"\n}",
        "options": {}
      },
      "name": "Responder a Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2250,
        300
      ]
    }
  ],
  "connections": {
    "Webhook Llamada": {
      "main": [
        [
          {
            "node": "Extraer Datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extraer Datos": {
      "main": [
        [
          {
            "node": "Descargar Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Whisper Transcripción": {
      "main": [
        [
          {
            "node": "Formatear Transcripción",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Descargar Audio": {
      "main": [
        [
          {
            "node": "Whisper Transcripción",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatear Transcripción": {
      "main": [
        [
          {
            "node": "Analizar con GPT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analizar con GPT": {
      "main": [
        [
          {
            "node": "Procesar Análisis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar Análisis": {
      "main": [
        [
          {
            "node": "Preparar Notificaciones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Actualizar API": {
      "main": [
        [
          {
            "node": "Responder a Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Notificaciones": {
      "main": [
        [
          {
            "node": "Enviar Notificaciones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar Notificaciones": {
      "main": [
        [
          {
            "node": "Actualizar API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "id": "1"
}

// Test directo del mecanismo setTimeout para verificar si funciona correctamente
console.log('üß™ Iniciando test directo de setTimeout...');

// Simular el mismo patr√≥n que usa el c√≥digo real
const activeStreams = new Map();
const streamSid = 'test_timeout_stream_123';

// Simular datos del stream
const streamData = {
    conversationTurn: 'speaking',
    botSpeaking: true,
    greetingSent: false
};

activeStreams.set(streamSid, streamData);

console.log(`‚è∞ [${streamSid}] Estado inicial: conversationTurn = ${streamData.conversationTurn}`);
console.log(`‚è∞ [${streamSid}] Programando timeout de 3 segundos para activar listening...`);

const timeoutId = setTimeout(() => {
    console.log(`‚è∞ [${streamSid}] TIMEOUT EJECUT√ÅNDOSE - verificando stream activo...`);
    
    if (activeStreams.has(streamSid)) {
        const currentStreamData = activeStreams.get(streamSid);
        console.log(`‚úÖ [${streamSid}] Stream encontrado, cambiando estado: ${currentStreamData.conversationTurn} ‚Üí listening`);
        
        currentStreamData.conversationTurn = 'listening';
        currentStreamData.botSpeaking = false;
        console.log(`üëÇ [${streamSid}] Activando escucha del usuario despu√©s del saludo`);
        console.log(`‚úÖ [${streamSid}] Estado final: conversationTurn = ${currentStreamData.conversationTurn}`);
        
        console.log('üéâ TIMEOUT EJECUTADO CORRECTAMENTE - El mecanismo setTimeout funciona');
        
    } else {
        console.log(`‚ùå [${streamSid}] TIMEOUT FALL√ì - Stream no encontrado en activeStreams`);
    }
}, 3000);

console.log(`‚è∞ [${streamSid}] Timeout programado con ID: ${timeoutId}`);

// Verificar que el timeout se ejecute
setTimeout(() => {
    console.log('üîç Verificando estado despu√©s de 4 segundos...');
    const finalState = activeStreams.get(streamSid);
    if (finalState && finalState.conversationTurn === 'listening') {
        console.log('‚úÖ SUCCESS: El timeout se ejecut√≥ y cambi√≥ el estado correctamente');
    } else {
        console.log('‚ùå FAILURE: El timeout no se ejecut√≥ o no cambi√≥ el estado');
        console.log('Estado actual:', finalState);
    }
    process.exit(0);
}, 4000);

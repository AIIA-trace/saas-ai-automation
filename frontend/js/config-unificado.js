/**
 * Script de configuraci√≥n unificado para resolver el problema de m√∫ltiples funciones de guardado
 * Este script deshabilita todas las funciones de guardado antiguas y asegura que
 * solo se use la funci√≥n saveUnifiedConfig() correctamente implementada
 */

document.addEventListener('DOMContentLoaded', function() {
    console.log('üîí Iniciando sistema de protecci√≥n contra guardados m√∫ltiples...');
    
    // 1. Capturar todas las funciones originales (para evitar que se ejecuten)
    const originalFunctions = {};
    
    // Lista de funciones de guardado que podr√≠an estar causando conflictos
    const functionNamesToDisable = [
        'saveGeneralConfig', 
        'saveVoiceConfig',
        'saveTransfersConfig', 
        'saveScriptConfig',
        'saveEmailConfig',
        'saveManualEmailConfig',
        'saveBotConfig',
        'updateBotConfig',
        'updateConfigUI'
    ];
    
    // Capturar y reemplazar las funciones originales
    functionNamesToDisable.forEach(funcName => {
        if (typeof window[funcName] === 'function') {
            originalFunctions[funcName] = window[funcName];
            
            // Reemplazar con una funci√≥n que registre el intento y llame a saveUnifiedConfig
            window[funcName] = function() {
                console.warn(`‚ö†Ô∏è Funci√≥n antigua ${funcName}() interceptada y redirigida a saveUnifiedConfig()`);
                return window.saveUnifiedConfig ? window.saveUnifiedConfig() : null;
            };
            
            console.log(`üîÑ Funci√≥n ${funcName}() redirigida a saveUnifiedConfig()`);
        }
    });
    
    // 2. Identificar todos los botones de guardado
    const saveButtonSelectors = [
        '#save-bot-config-btn',
        '#save-bot-config-btn-bottom',
        '#saveConfigButton',
        '#saveEmailConfig',
        '#save-voice-settings',
        '#save-call-settings',
        'button[id^="save"]', // Cualquier bot√≥n que comience con "save"
        'button:contains("Guardar")', // Cualquier bot√≥n con texto "Guardar"
        'a:contains("Guardar")' // Cualquier enlace con texto "Guardar"
    ];
    
    // 3. Establecer un handler unificado para todos los botones
    const unifiedSaveHandler = function(event) {
        console.log('üîÑ Bot√≥n de guardado interceptado, redirigiendo a saveUnifiedConfig()');
        
        event.preventDefault();
        
        if (window.saveUnifiedConfigBusy) {
            console.log(' saveUnifiedConfig est√° ocupado, ignorando click');
            return;
        }
        
        const button = event.currentTarget; // Guardar referencia al bot√≥n
        const buttonId = button.id;
        const originalText = button.innerHTML;
        
        // Cambiar el bot√≥n a "Guardando..."
        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Guardando...';
        
        // Llamar a la funci√≥n unificada
        window.saveUnifiedConfig()
            .then(() => {
                console.log(` Configuraci√≥n guardada exitosamente desde bot√≥n ${buttonId}`);
                // Verificar que el bot√≥n a√∫n existe en el DOM
                if (document.getElementById(buttonId)) {
                    button.innerHTML = '<i class="fas fa-check-circle"></i> Guardado';
                    button.classList.add('btn-success');
                    button.classList.remove('btn-primary');
                }
            })
            .catch((error) => {
                console.error(` Error guardando configuraci√≥n desde bot√≥n ${buttonId}:`, error);
                // Verificar que el bot√≥n a√∫n existe en el DOM
                if (document.getElementById(buttonId)) {
                    button.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Error';
                    button.classList.add('btn-danger');
                    button.classList.remove('btn-primary');
                }
            })
            .finally(() => {
                // Restaurar el bot√≥n despu√©s de 2 segundos
                setTimeout(() => {
                    // Verificar que el bot√≥n a√∫n existe en el DOM
                    if (document.getElementById(buttonId)) {
                        button.disabled = false;
                        button.innerHTML = originalText;
                        button.classList.add('btn-primary');
                        button.classList.remove('btn-success');
                        button.classList.remove('btn-danger');
                    }
                }, 2000);
            });
    };
    
    // 4. Asignar el handler unificado a todos los botones de guardado
    // Hacerlo despu√©s de un peque√±o delay para asegurar que todos los otros scripts se carguen
    setTimeout(() => {
        saveButtonSelectors.forEach(selector => {
            try {
                // Para selectores que usan jQuery
                if (selector.includes(':contains')) {
                    if (typeof $ === 'function') {
                        $(selector).each(function() {
                            const button = this;
                            // Eliminar todos los listeners existentes
                            const clone = button.cloneNode(true);
                            button.parentNode.replaceChild(clone, button);
                            // Agregar nuevo listener
                            clone.addEventListener('click', unifiedSaveHandler);
                        });
                    }
                } 
                // Para selectores CSS est√°ndar
                else {
                    document.querySelectorAll(selector).forEach(button => {
                        // Eliminar todos los listeners existentes
                        const clone = button.cloneNode(true);
                        button.parentNode.replaceChild(clone, button);
                        // Agregar nuevo listener
                        clone.addEventListener('click', unifiedSaveHandler);
                        console.log(`‚úÖ Handler unificado asignado a bot√≥n: ${button.id || selector}`);
                    });
                }
            } catch (err) {
                console.error(`‚ùå Error al procesar selector ${selector}:`, err);
            }
        });
        
        console.log('‚úÖ Sistema de protecci√≥n contra guardados m√∫ltiples activado');
    }, 1000);
    
    // 5. Log de diagn√≥stico para confirmar que la funci√≥n unificada existe
    if (typeof window.saveUnifiedConfig === 'function') {
        console.log('‚úÖ Funci√≥n saveUnifiedConfig() encontrada y lista para usar');
    } else {
        console.error('‚ùå CR√çTICO: Funci√≥n saveUnifiedConfig() no encontrada');
    }
});

// Funci√≥n para verificar si todos los campos del formulario est√°n siendo capturados
function verificarCamposFormulario() {
    console.log('üîç Verificando todos los campos del formulario...');
    
    // 1. Recolectar todos los campos del formulario
    const campos = {};
    
    // Inputs de texto, email, password, etc.
    document.querySelectorAll('input[id]:not([type="checkbox"]):not([type="radio"])').forEach(input => {
        campos[input.id] = {
            id: input.id,
            tipo: input.type,
            valor: input.value,
            incluido: false
        };
    });
    
    // Checkboxes
    document.querySelectorAll('input[type="checkbox"][id]').forEach(checkbox => {
        campos[checkbox.id] = {
            id: checkbox.id,
            tipo: 'checkbox',
            valor: checkbox.checked,
            incluido: false
        };
    });
    
    // Selects
    document.querySelectorAll('select[id]').forEach(select => {
        campos[select.id] = {
            id: select.id,
            tipo: 'select',
            valor: select.value,
            incluido: false
        };
    });
    
    // Textareas
    document.querySelectorAll('textarea[id]').forEach(textarea => {
        campos[textarea.id] = {
            id: textarea.id,
            tipo: 'textarea',
            valor: textarea.value,
            incluido: false
        };
    });
    
    console.log(`üî¢ Total de campos en el formulario: ${Object.keys(campos).length}`);
    
    // 2. Verificar si saveUnifiedConfig() recolecta todos estos campos
    if (typeof window.saveUnifiedConfig === 'function') {
        // Guardar funci√≥n original
        const originalFunc = window.saveUnifiedConfig;
        
        // Reemplazar temporalmente con versi√≥n de diagn√≥stico
        window.saveUnifiedConfig = function() {
            console.log('üîç Iniciando diagn√≥stico de recolecci√≥n de campos...');
            
            // Llamar a la funci√≥n original para ver qu√© campos recolecta
            const resultado = originalFunc.apply(this, arguments);
            
            // Restaurar la funci√≥n original
            window.saveUnifiedConfig = originalFunc;
            
            return resultado;
        };
        
        // Invocar funci√≥n para verificar
        console.log('üß™ Para completar la verificaci√≥n, por favor haz clic en "Guardar Configuraci√≥n"');
    } else {
        console.error('‚ùå No se puede verificar los campos porque saveUnifiedConfig() no est√° disponible');
    }
    
    // 3. Devolver lista de campos para referencia
    return campos;
}

// Exportar funciones para uso global
window.verificarCamposFormulario = verificarCamposFormulario;

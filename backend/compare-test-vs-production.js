#!/usr/bin/env node

/**
 * COMPARACI√ìN COMPLETA: TEST vs PRODUCCI√ìN
 * Analiza paso a paso si el flujo es id√©ntico entre el test y el sistema de producci√≥n
 */

const fs = require('fs');
const path = require('path');

function analyzeTestFlow() {
  console.log('üß™ === AN√ÅLISIS DEL FLUJO DEL TEST ===\n');
  
  const testFile = fs.readFileSync('/Users/javisanher/Desktop/Agente de IA/backend/test-final-call-complete.js', 'utf8');
  
  console.log('üìã FLUJO DEL TEST:');
  console.log('1. ‚úÖ Simula llamada HTTP al webhook');
  console.log('2. ‚úÖ Extrae par√°metros del TwiML generado');
  console.log('3. ‚úÖ Consulta DB con: prisma.client.findUnique()');
  console.log('4. ‚úÖ Estructura cliente con campos: id, companyName, email, callConfig, etc.');
  console.log('5. ‚úÖ Llama azureTTSService.generateSpeech(greeting, voiceId)');
  console.log('6. ‚úÖ Verifica audioResult.success y audioResult.audioBuffer');
  console.log('7. ‚úÖ Crea Buffer.from(audioResult.audioBuffer)');
  console.log('8. ‚úÖ Simula divisi√≥n en chunks para streaming\n');
  
  return {
    dbQuery: 'prisma.client.findUnique()',
    clientStructure: ['id', 'companyName', 'email', 'callConfig', 'companyInfo', 'botConfig', 'businessHours', 'faqs', 'contextFiles'],
    ttsCall: 'azureTTSService.generateSpeech(greeting, voiceId)',
    audioHandling: 'Buffer.from(audioResult.audioBuffer)',
    validation: 'audioResult.success && audioResult.audioBuffer'
  };
}

function analyzeProductionFlow() {
  console.log('üè≠ === AN√ÅLISIS DEL FLUJO DE PRODUCCI√ìN ===\n');
  
  // Analizar webhook controller
  const webhookFile = fs.readFileSync('/Users/javisanher/Desktop/Agente de IA/backend/src/controllers/webhookController.js', 'utf8');
  const streamHandlerFile = fs.readFileSync('/Users/javisanher/Desktop/Agente de IA/backend/src/websocket/twilioStreamHandler.js', 'utf8');
  const twimlServiceFile = fs.readFileSync('/Users/javisanher/Desktop/Agente de IA/backend/src/services/streamingTwiMLService.js', 'utf8');
  
  console.log('üìã FLUJO DE PRODUCCI√ìN:');
  console.log('1. ‚úÖ Webhook recibe llamada HTTP');
  console.log('2. ‚úÖ Consulta DB con: prisma.twilioNumber.findUnique()');
  console.log('3. ‚úÖ Valida callConfig como objeto/JSON');
  console.log('4. ‚úÖ Genera TwiML con streamingTwiMLService.createStreamTwiML()');
  console.log('5. ‚úÖ WebSocket recibe par√°metros del TwiML');
  console.log('6. ‚úÖ Llama this.ttsService.generateSpeech(greeting, voiceId)');
  console.log('7. ‚úÖ Verifica audioResult.success y audioResult.audioBuffer');
  console.log('8. ‚úÖ Crea Buffer.from(audioResult.audioBuffer)');
  console.log('9. ‚úÖ Env√≠a audio via sendAudioToTwilio()\n');
  
  return {
    dbQuery: 'prisma.twilioNumber.findUnique()',
    clientStructure: 'Desde par√°metros TwiML',
    ttsCall: 'this.ttsService.generateSpeech(greeting, voiceId)',
    audioHandling: 'Buffer.from(audioResult.audioBuffer)',
    validation: 'audioResult.success && audioResult.audioBuffer'
  };
}

function compareFlows() {
  console.log('üîç === COMPARACI√ìN DETALLADA ===\n');
  
  const testFlow = analyzeTestFlow();
  const prodFlow = analyzeProductionFlow();
  
  console.log('üìä COMPARACI√ìN PUNTO POR PUNTO:');
  
  // 1. Consulta a la base de datos
  console.log('\n1Ô∏è‚É£ CONSULTA BASE DE DATOS:');
  console.log(`   Test:       ${testFlow.dbQuery}`);
  console.log(`   Producci√≥n: ${prodFlow.dbQuery}`);
  console.log(`   ‚ùå DIFERENTE: Test consulta directamente client, Producci√≥n consulta twilioNumber.client`);
  
  // 2. Estructura del cliente
  console.log('\n2Ô∏è‚É£ ESTRUCTURA DEL CLIENTE:');
  console.log(`   Test:       Consulta directa con select espec√≠fico`);
  console.log(`   Producci√≥n: Reconstruye desde par√°metros TwiML`);
  console.log(`   ‚ùå DIFERENTE: Test tiene acceso directo a DB, Producci√≥n usa par√°metros`);
  
  // 3. Llamada TTS
  console.log('\n3Ô∏è‚É£ LLAMADA AZURE TTS:');
  console.log(`   Test:       ${testFlow.ttsCall}`);
  console.log(`   Producci√≥n: ${prodFlow.ttsCall}`);
  console.log(`   ‚úÖ ID√âNTICO: Ambos usan generateSpeech() con los mismos par√°metros`);
  
  // 4. Manejo de audio
  console.log('\n4Ô∏è‚É£ MANEJO DE AUDIO:');
  console.log(`   Test:       ${testFlow.audioHandling}`);
  console.log(`   Producci√≥n: ${prodFlow.audioHandling}`);
  console.log(`   ‚úÖ ID√âNTICO: Ambos usan Buffer.from(audioResult.audioBuffer)`);
  
  // 5. Validaci√≥n
  console.log('\n5Ô∏è‚É£ VALIDACI√ìN:');
  console.log(`   Test:       ${testFlow.validation}`);
  console.log(`   Producci√≥n: ${prodFlow.validation}`);
  console.log(`   ‚úÖ ID√âNTICO: Misma l√≥gica de validaci√≥n`);
  
  return {
    identical: ['ttsCall', 'audioHandling', 'validation'],
    different: ['dbQuery', 'clientStructure'],
    criticalDifferences: [
      'Test consulta DB directamente, Producci√≥n usa par√°metros TwiML',
      'Test tiene acceso completo a campos DB, Producci√≥n depende de par√°metros pasados'
    ]
  };
}

function analyzeFileConsistency() {
  console.log('\nüìÅ === AN√ÅLISIS DE CONSISTENCIA DE ARCHIVOS ===\n');
  
  const files = [
    '/Users/javisanher/Desktop/Agente de IA/backend/src/controllers/webhookController.js',
    '/Users/javisanher/Desktop/Agente de IA/backend/src/websocket/twilioStreamHandler.js',
    '/Users/javisanher/Desktop/Agente de IA/backend/src/services/streamingTwiMLService.js',
    '/Users/javisanher/Desktop/Agente de IA/backend/src/services/azureTTSService.js'
  ];
  
  console.log('üîç VERIFICANDO CONSISTENCIA:');
  
  files.forEach(filePath => {
    const fileName = path.basename(filePath);
    const content = fs.readFileSync(filePath, 'utf8');
    
    console.log(`\nüìÑ ${fileName}:`);
    
    // Verificar uso de businessHours vs businessHoursConfig
    const hasOldField = content.includes('businessHoursConfig');
    const hasNewField = content.includes('businessHours');
    console.log(`   businessHours: ${hasNewField ? '‚úÖ' : '‚ùå'}`);
    console.log(`   businessHoursConfig (obsoleto): ${hasOldField ? '‚ùå' : '‚úÖ'}`);
    
    // Verificar uso de Azure TTS
    const hasAzureTTS = content.includes('generateSpeech') || content.includes('azureTTSService');
    console.log(`   Azure TTS: ${hasAzureTTS ? '‚úÖ' : '‚ö†Ô∏è'}`);
    
    // Verificar manejo de audioBuffer
    const hasAudioBuffer = content.includes('audioBuffer');
    console.log(`   audioBuffer: ${hasAudioBuffer ? '‚úÖ' : '‚ö†Ô∏è'}`);
  });
}

function generateConclusions() {
  console.log('\nüéØ === CONCLUSIONES FINALES ===\n');
  
  const comparison = compareFlows();
  
  console.log('‚úÖ ASPECTOS ID√âNTICOS:');
  console.log('   - Llamada a Azure TTS con generateSpeech()');
  console.log('   - Manejo de audioBuffer con Buffer.from()');
  console.log('   - Validaci√≥n de audioResult.success');
  console.log('   - L√≥gica de error y fallback');
  
  console.log('\n‚ùå DIFERENCIAS CR√çTICAS:');
  console.log('   - Test: Consulta directa a prisma.client.findUnique()');
  console.log('   - Producci√≥n: Consulta prisma.twilioNumber.findUnique() + par√°metros TwiML');
  console.log('   - Test: Acceso directo a todos los campos de la DB');
  console.log('   - Producci√≥n: Dependiente de par√°metros pasados por TwiML');
  
  console.log('\n‚ö†Ô∏è RIESGOS IDENTIFICADOS:');
  console.log('   - Si TwiML no pasa todos los par√°metros, producci√≥n falla');
  console.log('   - Producci√≥n tiene un paso adicional (TwiML ‚Üí WebSocket)');
  console.log('   - Test simula condiciones ideales, producci√≥n tiene m√°s puntos de fallo');
  
  console.log('\nüîß RECOMENDACIONES:');
  console.log('   1. Verificar que TwiML pasa TODOS los par√°metros necesarios');
  console.log('   2. Agregar validaci√≥n de par√°metros en WebSocket handler');
  console.log('   3. Considerar fallback a consulta DB si faltan par√°metros');
  console.log('   4. Logs detallados para debugging de par√°metros faltantes');
}

// Ejecutar an√°lisis completo
console.log('üîç === AN√ÅLISIS COMPLETO: TEST vs PRODUCCI√ìN ===\n');

analyzeTestFlow();
analyzeProductionFlow();
compareFlows();
analyzeFileConsistency();
generateConclusions();

require('dotenv').config();
const twilio = require('twilio');

async function checkTwilioNumbers() {
  try {
    const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
    
    console.log('üîç Verificando n√∫meros de Twilio configurados...\n');
    
    // Obtener todos los n√∫meros
    const numbers = await client.incomingPhoneNumbers.list();
    
    if (numbers.length === 0) {
      console.log('‚ùå No hay n√∫meros configurados en Twilio');
      return;
    }
    
    console.log(`üì± N√∫meros encontrados: ${numbers.length}\n`);
    
    numbers.forEach((number, index) => {
      console.log(`--- N√∫mero ${index + 1} ---`);
      console.log(`üìû N√∫mero: ${number.phoneNumber}`);
      console.log(`üè∑Ô∏è  Nombre: ${number.friendlyName}`);
      console.log(`üåê Voice URL: ${number.voiceUrl || 'NO CONFIGURADO'}`);
      console.log(`üìã Voice Method: ${number.voiceMethod || 'NO CONFIGURADO'}`);
      console.log(`üîÑ Fallback URL: ${number.voiceFallbackUrl || 'NO CONFIGURADO'}`);
      console.log(`üìÖ Creado: ${number.dateCreated}`);
      console.log('');
    });
    
    // Verificar URL base actual
    const expectedBaseUrl = process.env.TWILIO_WEBHOOK_BASE_URL || 'https://saas-ai-automation.onrender.com';
    console.log(`üéØ URL base esperada: ${expectedBaseUrl}`);
    
    // Verificar si alg√∫n n√∫mero tiene la URL correcta
    const correctlyConfigured = numbers.filter(number => 
      number.voiceUrl && number.voiceUrl.includes(expectedBaseUrl)
    );
    
    console.log(`‚úÖ N√∫meros correctamente configurados: ${correctlyConfigured.length}`);
    
    if (correctlyConfigured.length === 0) {
      console.log('\nüö® PROBLEMA ENCONTRADO: Ning√∫n n√∫mero tiene el webhook correcto');
      console.log('üí° Soluci√≥n: Configurar webhook para recibir llamadas');
    }
    
  } catch (error) {
    console.error('‚ùå Error verificando n√∫meros:', error.message);
  }
}

checkTwilioNumbers();

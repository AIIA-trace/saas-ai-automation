/**
 * Script para debuggear la actualizaci√≥n de horarios comerciales
 * Simula exactamente lo que hace el frontend cuando guardas "jueves y s√°bado"
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugBusinessHoursUpdate() {
    console.log('üîç Debuggeando actualizaci√≥n de horarios comerciales...');
    
    try {
        // 1. Obtener estado actual
        const email = 'javier.sanhez@javier.com';
        console.log(`üìß Buscando cliente: ${email}`);
        
        const currentClient = await prisma.client.findUnique({
            where: { email: email },
            select: {
                id: true,
                email: true,
                businessHoursConfig: true,
                updatedAt: true
            }
        });
        
        if (!currentClient) {
            console.log('‚ùå Cliente no encontrado');
            return;
        }
        
        console.log('üìã ESTADO ACTUAL:');
        console.log('   ID:', currentClient.id);
        console.log('   √öltima actualizaci√≥n:', currentClient.updatedAt);
        console.log('   businessHoursConfig actual:', JSON.stringify(currentClient.businessHoursConfig, null, 2));
        
        // 2. Simular los datos que env√≠a el frontend para "jueves y s√°bado"
        const newBusinessHoursConfig = {
            enabled: true,
            workingDays: ['thursday', 'saturday'],  // Jueves y s√°bado
            openingTime: '09:00',
            closingTime: '18:00'
        };
        
        console.log('\nüì§ DATOS QUE DEBER√çA ENVIAR EL FRONTEND:');
        console.log(JSON.stringify(newBusinessHoursConfig, null, 2));
        
        // 3. Simular la actualizaci√≥n exacta que hace el backend
        console.log('\nüîÑ SIMULANDO ACTUALIZACI√ìN...');
        
        const updateData = {
            businessHoursConfig: newBusinessHoursConfig
        };
        
        console.log('üìä updateData preparado:', JSON.stringify(updateData, null, 2));
        
        // 4. Ejecutar la actualizaci√≥n
        const updatedClient = await prisma.client.update({
            where: { id: currentClient.id },
            data: updateData
        });
        
        console.log('\n‚úÖ ACTUALIZACI√ìN COMPLETADA');
        console.log('üìã NUEVO ESTADO:');
        console.log('   √öltima actualizaci√≥n:', updatedClient.updatedAt);
        console.log('   businessHoursConfig nuevo:', JSON.stringify(updatedClient.businessHoursConfig, null, 2));
        
        // 5. Verificar que los cambios se aplicaron correctamente
        console.log('\nüîç VERIFICACI√ìN:');
        console.log('   ¬øHabilitado?', updatedClient.businessHoursConfig?.enabled ? '‚úÖ S√ç' : '‚ùå NO');
        console.log('   D√≠as esperados: thursday, saturday');
        console.log('   D√≠as guardados:', updatedClient.businessHoursConfig?.workingDays?.join(', ') || 'ninguno');
        
        const expectedDays = ['thursday', 'saturday'];
        const actualDays = updatedClient.businessHoursConfig?.workingDays || [];
        const daysMatch = JSON.stringify(expectedDays.sort()) === JSON.stringify(actualDays.sort());
        
        console.log('   ¬øD√≠as coinciden?', daysMatch ? '‚úÖ S√ç' : '‚ùå NO');
        
        if (!daysMatch) {
            console.log('   üö® DISCREPANCIA DETECTADA:');
            console.log('     Esperado:', expectedDays);
            console.log('     Real:', actualDays);
        }
        
        // 6. Verificar en la base de datos directamente
        console.log('\nüîç VERIFICACI√ìN DIRECTA EN BD:');
        const verifyClient = await prisma.client.findUnique({
            where: { id: currentClient.id },
            select: { businessHoursConfig: true }
        });
        
        console.log('   BD dice:', JSON.stringify(verifyClient.businessHoursConfig, null, 2));
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
        console.error(error.stack);
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar el debug
debugBusinessHoursUpdate();

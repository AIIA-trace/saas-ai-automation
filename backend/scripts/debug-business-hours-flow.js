const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient();

async function debugBusinessHoursFlow() {
  try {
    console.log('üîç DIAGN√ìSTICO COMPLETO DEL FLUJO DE BUSINESS HOURS');
    console.log('='.repeat(70));
    
    // 1. Estado actual en BD
    const client = await prisma.client.findUnique({
      where: { id: 18 },
      select: {
        id: true,
        email: true,
        companyName: true,
        businessHoursConfig: true,
        updatedAt: true
      }
    });

    if (!client) {
      console.log('‚ùå Cliente ID 18 no encontrado');
      return;
    }

    console.log('\nüìä ESTADO ACTUAL EN BASE DE DATOS:');
    console.log('='.repeat(50));
    console.log(`üë§ Cliente: ${client.companyName} (${client.email})`);
    console.log(`üîÑ √öltima actualizaci√≥n: ${client.updatedAt}`);
    
    const now = new Date();
    const lastUpdate = new Date(client.updatedAt);
    const diffSeconds = Math.floor((now - lastUpdate) / 1000);
    console.log(`‚è∞ Hace: ${diffSeconds} segundos`);
    
    if (client.businessHoursConfig) {
      console.log('\nüïê BUSINESS HOURS CONFIG ACTUAL:');
      console.log('='.repeat(40));
      console.log(JSON.stringify(client.businessHoursConfig, null, 2));
      
      const config = client.businessHoursConfig;
      console.log('\nüìã AN√ÅLISIS DETALLADO:');
      console.log(`- Habilitado: ${config.enabled ? '‚úÖ' : '‚ùå'}`);
      console.log(`- Hora apertura: ${config.openingTime || 'No definida'}`);
      console.log(`- Hora cierre: ${config.closingTime || 'No definida'}`);
      
      if (config.workingDays && Array.isArray(config.workingDays)) {
        console.log(`- D√≠as laborables (${config.workingDays.length}):`);
        
        const dayNames = {
          'monday': 'Lunes',
          'tuesday': 'Martes', 
          'wednesday': 'Mi√©rcoles',
          'thursday': 'Jueves',
          'friday': 'Viernes',
          'saturday': 'S√°bado',
          'sunday': 'Domingo'
        };
        
        config.workingDays.forEach((day, index) => {
          const spanishName = dayNames[day] || 'Desconocido';
          console.log(`  ${index + 1}. ${day} (${spanishName})`);
        });
        
        // Verificar si hay d√≠as en espa√±ol (indicar√≠a que el mapeo no funcion√≥)
        const spanishDays = config.workingDays.filter(day => 
          ['lunes', 'martes', 'mi√©rcoles', 'jueves', 'viernes', 's√°bado', 'domingo'].includes(day)
        );
        
        if (spanishDays.length > 0) {
          console.log('\nüö® PROBLEMA DETECTADO:');
          console.log('‚ùå Se encontraron d√≠as en ESPA√ëOL en la BD:', spanishDays);
          console.log('   Esto indica que el mapeo espa√±ol‚Üíingl√©s NO funcion√≥');
        } else {
          console.log('\n‚úÖ MAPEO CORRECTO:');
          console.log('   Todos los d√≠as est√°n en ingl√©s como se esperaba');
        }
        
      } else {
        console.log('- D√≠as laborables: ‚ùå No definidos o formato incorrecto');
      }
      
    } else {
      console.log('\n‚ùå NO HAY BUSINESS HOURS CONFIG en la BD');
    }
    
    // 2. Verificar actualizaciones muy recientes
    const oneMinuteAgo = new Date(now.getTime() - 60 * 1000);
    console.log('\nüîç VERIFICACI√ìN DE ACTUALIZACIONES RECIENTES:');
    console.log('='.repeat(50));
    console.log(`‚è∞ Buscando actualizaciones desde: ${oneMinuteAgo.toLocaleString()}`);
    
    if (lastUpdate > oneMinuteAgo) {
      console.log('‚úÖ HAY actualizaciones MUY recientes (√∫ltimo minuto)');
      console.log('   El sistema S√ç est√° guardando datos');
    } else {
      console.log('‚ö†Ô∏è NO hay actualizaciones muy recientes');
      console.log('   Posible problema en el guardado');
    }
    
    // 3. An√°lisis de problemas comunes
    console.log('\nüîß AN√ÅLISIS DE PROBLEMAS COMUNES:');
    console.log('='.repeat(50));
    
    if (!client.businessHoursConfig) {
      console.log('‚ùå PROBLEMA: businessHoursConfig es NULL');
      console.log('   - El frontend no est√° enviando el campo');
      console.log('   - El backend no est√° procesando el campo');
      console.log('   - Hay un error en la transmisi√≥n de datos');
    } else if (client.businessHoursConfig.workingDays && client.businessHoursConfig.workingDays.length === 0) {
      console.log('‚ùå PROBLEMA: workingDays est√° vac√≠o');
      console.log('   - Los checkboxes no se est√°n leyendo correctamente');
      console.log('   - El selector de elementos es incorrecto');
    } else if (client.businessHoursConfig.workingDays) {
      const spanishDaysInDB = client.businessHoursConfig.workingDays.filter(day => 
        ['lunes', 'martes', 'mi√©rcoles', 'jueves', 'viernes', 's√°bado', 'domingo'].includes(day)
      );
      
      if (spanishDaysInDB.length > 0) {
        console.log('‚ùå PROBLEMA: D√≠as en espa√±ol en la BD');
        console.log('   - El mapeo espa√±ol‚Üíingl√©s no se ejecut√≥');
        console.log('   - El c√≥digo actualizado no se est√° cargando');
        console.log('   - Hay cache del navegador');
      } else {
        console.log('‚úÖ MAPEO FUNCIONANDO: D√≠as en ingl√©s correctos');
        console.log('   - El problema puede estar en la selecci√≥n de elementos');
        console.log('   - O en la l√≥gica de qu√© d√≠as se consideran seleccionados');
      }
    }
    
    console.log('\nüéØ PR√ìXIMOS PASOS RECOMENDADOS:');
    console.log('='.repeat(50));
    console.log('1. Verificar logs del navegador al guardar');
    console.log('2. Confirmar que el c√≥digo actualizado se est√° ejecutando');
    console.log('3. Verificar que los selectores de elementos son correctos');
    console.log('4. Revisar logs del backend para ver datos recibidos');
    
  } catch (error) {
    console.error('‚ùå Error en el diagn√≥stico:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar diagn√≥stico
debugBusinessHoursFlow();

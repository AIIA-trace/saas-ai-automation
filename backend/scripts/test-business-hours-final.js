/**
 * Script de prueba final para verificar que los horarios comerciales
 * se actualizan correctamente despu√©s de los fixes aplicados
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testBusinessHoursFinal() {
    console.log('üß™ PRUEBA FINAL - Verificando actualizaci√≥n de horarios comerciales...');
    
    try {
        const email = 'javier.sanhez@javier.com';
        console.log(`üìß Cliente: ${email}`);
        
        // 1. Estado inicial
        const initialClient = await prisma.client.findUnique({
            where: { email: email },
            select: {
                id: true,
                businessHoursConfig: true,
                updatedAt: true
            }
        });
        
        console.log('\nüìã ESTADO INICIAL:');
        console.log('   businessHoursConfig:', JSON.stringify(initialClient.businessHoursConfig, null, 2));
        console.log('   √öltima actualizaci√≥n:', initialClient.updatedAt);
        
        // 2. Simular actualizaci√≥n con "jueves y s√°bado" (lo que el usuario quiere guardar)
        console.log('\nüéØ SIMULANDO: Usuario selecciona JUEVES y S√ÅBADO');
        
        const testConfig = {
            enabled: true,
            workingDays: ['thursday', 'saturday'],
            openingTime: '10:00',
            closingTime: '19:00'
        };
        
        console.log('üì§ Datos a guardar:', JSON.stringify(testConfig, null, 2));
        
        // 3. Ejecutar actualizaci√≥n
        const updatedClient = await prisma.client.update({
            where: { id: initialClient.id },
            data: {
                businessHoursConfig: testConfig
            }
        });
        
        console.log('\n‚úÖ ACTUALIZACI√ìN COMPLETADA');
        console.log('üìã RESULTADO:');
        console.log('   businessHoursConfig:', JSON.stringify(updatedClient.businessHoursConfig, null, 2));
        console.log('   Nueva actualizaci√≥n:', updatedClient.updatedAt);
        
        // 4. Verificaci√≥n
        const verification = updatedClient.businessHoursConfig;
        const expectedDays = ['thursday', 'saturday'];
        const actualDays = verification?.workingDays || [];
        
        console.log('\nüîç VERIFICACI√ìN:');
        console.log('   ‚úÖ Habilitado:', verification?.enabled ? 'S√ç' : 'NO');
        console.log('   üìÖ D√≠as esperados:', expectedDays.join(', '));
        console.log('   üìÖ D√≠as guardados:', actualDays.join(', '));
        console.log('   ‚è∞ Horario esperado: 10:00 - 19:00');
        console.log('   ‚è∞ Horario guardado:', `${verification?.openingTime} - ${verification?.closingTime}`);
        
        // Verificar coincidencias
        const daysMatch = JSON.stringify(expectedDays.sort()) === JSON.stringify(actualDays.sort());
        const timesMatch = verification?.openingTime === '10:00' && verification?.closingTime === '19:00';
        
        console.log('\nüéØ RESULTADO FINAL:');
        console.log('   D√≠as coinciden:', daysMatch ? '‚úÖ S√ç' : '‚ùå NO');
        console.log('   Horarios coinciden:', timesMatch ? '‚úÖ S√ç' : '‚ùå NO');
        console.log('   Habilitado correcto:', verification?.enabled ? '‚úÖ S√ç' : '‚ùå NO');
        
        if (daysMatch && timesMatch && verification?.enabled) {
            console.log('\nüéâ ¬°√âXITO! Los horarios comerciales se actualizan correctamente');
            console.log('   El problema est√° resuelto - el backend funciona perfectamente');
        } else {
            console.log('\n‚ùå FALLO: A√∫n hay problemas en la actualizaci√≥n');
        }
        
        // 5. Prueba adicional: Cambiar a "lunes, mi√©rcoles, viernes"
        console.log('\nüß™ PRUEBA ADICIONAL: Cambiar a lunes, mi√©rcoles, viernes');
        
        const testConfig2 = {
            enabled: true,
            workingDays: ['monday', 'wednesday', 'friday'],
            openingTime: '08:30',
            closingTime: '17:30'
        };
        
        const updatedClient2 = await prisma.client.update({
            where: { id: initialClient.id },
            data: {
                businessHoursConfig: testConfig2
            }
        });
        
        console.log('üìã SEGUNDA ACTUALIZACI√ìN:');
        console.log('   businessHoursConfig:', JSON.stringify(updatedClient2.businessHoursConfig, null, 2));
        
        const verification2 = updatedClient2.businessHoursConfig;
        const expectedDays2 = ['monday', 'wednesday', 'friday'];
        const actualDays2 = verification2?.workingDays || [];
        const daysMatch2 = JSON.stringify(expectedDays2.sort()) === JSON.stringify(actualDays2.sort());
        
        console.log('   D√≠as coinciden:', daysMatch2 ? '‚úÖ S√ç' : '‚ùå NO');
        
        if (daysMatch2) {
            console.log('\nüéâ ¬°PERFECTO! Las actualizaciones m√∫ltiples funcionan correctamente');
        }
        
    } catch (error) {
        console.error('‚ùå Error en la prueba:', error.message);
        console.error(error.stack);
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar la prueba
testBusinessHoursFinal();

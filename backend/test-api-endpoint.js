const { PrismaClient } = require('@prisma/client');
const jwt = require('jsonwebtoken');

const prisma = new PrismaClient();

async function testApiEndpoint() {
  try {
    console.log('üîç Simulando endpoint GET /api/client...');
    
    // Simular la consulta exacta del endpoint
    const client = await prisma.client.findUnique({
      where: { id: 1 },
      select: {
        // Datos de perfil
        id: true,
        email: true,
        companyName: true,
        contactName: true,
        phone: true,
        position: true,
        industry: true,
        address: true,
        website: true,
        createdAt: true,
        updatedAt: true,
        
        // Datos de suscripci√≥n
        subscriptionStatus: true,
        subscriptionExpiresAt: true,
        
        // Campos directos de configuraci√≥n del bot (nuevo sistema)
        botName: true,
        botLanguage: true,
        welcomeMessage: true,
        confirmationMessage: true,
        botPersonality: true,
        companyInfo: true,
        emailConfig: true,
        callConfig: true,
        notificationConfig: true,
        businessHours: true,
        
        // FAQs y archivos de contexto
        faqs: true,
        contextFiles: true,
        
        // N√∫meros de tel√©fono asociados
        twilioNumbers: {
          select: {
            id: true,
            phoneNumber: true,
            status: true,
            createdAt: true
          }
        }
      }
    });

    if (!client) {
      console.log('‚ùå Cliente no encontrado');
      return;
    }

    console.log('‚úÖ Cliente encontrado');
    console.log('üìû ===== CALLCONFIG EN RESPUESTA API =====');
    console.log('callConfig existe:', !!client.callConfig);
    
    if (client.callConfig) {
      console.log('callConfig tipo:', typeof client.callConfig);
      console.log('callConfig contenido:');
      console.log(JSON.stringify(client.callConfig, null, 2));
      
      console.log('');
      console.log('üìû ===== CAMPOS ESPEC√çFICOS EN API =====');
      console.log('üéµ greeting:', client.callConfig.greeting || 'NO DEFINIDO');
      console.log('üó£Ô∏è voiceId:', client.callConfig.voiceId || 'NO DEFINIDO');
      console.log('üåê language:', client.callConfig.language || 'NO DEFINIDO');
      console.log('ü§ñ enabled:', client.callConfig.enabled);
    } else {
      console.log('‚ùå callConfig es null/undefined en la respuesta');
    }

    console.log('');
    console.log('üìä ===== ESTRUCTURA COMPLETA DE RESPUESTA =====');
    console.log('Campos disponibles:', Object.keys(client));
    
    // Simular la respuesta exacta que devuelve el endpoint
    const apiResponse = {
      success: true,
      message: 'Datos del cliente obtenidos correctamente',
      data: client
    };

    console.log('');
    console.log('üì§ ===== RESPUESTA SIMULADA DEL ENDPOINT =====');
    console.log('success:', apiResponse.success);
    console.log('data.callConfig existe:', !!apiResponse.data.callConfig);
    
    if (apiResponse.data.callConfig) {
      console.log('data.callConfig.greeting:', apiResponse.data.callConfig.greeting);
      console.log('data.callConfig.voiceId:', apiResponse.data.callConfig.voiceId);
    }

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testApiEndpoint();
